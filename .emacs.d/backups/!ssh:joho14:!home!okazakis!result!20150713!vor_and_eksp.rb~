# -*- coding: utf-8 -*-
require "numru/ggraph"
include NumRu

# ----- コマンドラインオプション -----
file1 = ARGV[0].to_s
# 第1引数は渦度を取り出してくるファイル名(必須)
file2 = ARGV[1].to_s
# 第2引数はスペクトルを取り出してくるファイル名(必須)
iws = ( ARGV[2] || 1 ).to_i    # 第3引数は装置番号 (1,2,or 4)
tsleep = [ ( ARGV[3] || 0.0 ).to_f, 0.0 ].max  # 第4引数は描画間隔(秒)
wait = ( tsleep <= 0.0 )       #->true/false; 0以下(true)ならマウスクリックを待つ
fsec = ( ARGV[4] ||   0 ).to_i  # 第5引数は最初の時刻
lsec = ( ARGV[5] || 30 ).to_i   # 第6引数は最後の時刻

# ----- 使用データ -----
vor   = GPhys::IO.open file1, 'vor'
eksp  = GPhys::IO.open file2, '1deksp'

# ----- DCL設定 -----
def prep_dcl(iws=4,wait=false) # iws : DCL出力デバイス．1,4:画面, 2:PS
  DCL.sgscmn(4)               # カラーマップ番号
  DCL.swpset("iwidth",900)     # 画面の幅
  DCL.swpset("iheight",450)    # 画面の高さ
  DCL.swpset("lwait",wait)     # 次の描画の前にマウスクリックを待つ
  DCL.swpset("lalt",true)      # 裏で描画（パラパラアニメ用）
  DCL.gropn(iws)
  DCL.sldiv("y",2,1)           # 画面分割 (描画順("y"oko/"t"ate),数:横,数:縦)
  DCL.sgpset('isub', 96)       # 下付き添字を表す制御文字を '_' から '`' に
  DCL.glpset('lmiss',true)     # DCLの欠損値処理を on に
end

prep_dcl(iws,wait)
time = fsec
# ===== 最初の時刻が t=0 の場合 =====
if time == 0
  # ----- 渦度の物理空間の絵 -----
  GGraph.set_fig("itr"=>1)
  GGraph.set_tone("min"=>-160,"max"=>160,"levels"=>[-160,-120,-80,-40,-30,-25,-20,-15,-10,-5,0,5,10,15,20,25,30,40,80,120,160])
  GGraph.tone vor.cut("t"=>time)
  GGraph.color_bar
  # ----- エネルギースペクトルの図 -----
  GGraph.set_fig("itr"=>4)
  GGraph.line eksp.cut("t"=>time),true,"max"=>5,"min"=>1.0*10**(-30)
  sleep tsleep
  time = fsec + 0.25
  while time <= lsec
    # ----- 渦度の物理空間の絵 -----
    GGraph.set_fig("itr"=>1)
    GGraph.set_tone("min"=>-160,"max"=>160,"levels"=>[-160,-120,-80,-40,-30,-25,-20,-15,-10,-5,0,5,10,15,20,25,30,40,80,120,160])
    GGraph.tone vor.cut("t"=>time)
    GGraph.color_bar
    # ----- エネルギースペクトルの図 -----
    GGraph.set_fig("itr"=>4)
    GGraph.line eksp.cut("t"=>time),true,"max"=>5,"min"=>1.0*10**(-7)
    sleep tsleep
    time += 0.25
  end
# ===== 最初の時刻が t=0 でない場合 =====
else
  time = fsec
  while time <= lsec
    # ----- 渦度の物理空間の絵 -----
    GGraph.set_fig("itr"=>1)
    GGraph.set_tone("min"=>-160,"max"=>160,"levels"=>[-160,-120,-80,-40,-30,-25,-20,-15,-10,-5,0,5,10,15,20,25,30,40,80,120,160])
    GGraph.tone vor.cut("t"=>time)
    GGraph.color_bar
    # ----- エネルギースペクトルの図 -----
    GGraph.set_fig("itr"=>4)
    GGraph.line eksp.cut("t"=>time),true,"max"=>5,"min"=>1.0*10**(-7)
    sleep tsleep
    time += 0.25
  end
end

DCL.grcls      # 描画終了処理
  
